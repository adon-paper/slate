// Code generated by MockGen. DO NOT EDIT.
// Source: arango/base_repository.go
//
// Generated by this command:
//
//	mockgen -source=arango/base_repository.go -destination=arango/base_repository_mock.go --package=arango
//

// Package arango is a generated GoMock package.
package arango

import (
	context "context"
	reflect "reflect"

	driver "github.com/arangodb/go-driver"
	gomock "go.uber.org/mock/gomock"
)

// MockArangoBaseRepositoryInterface is a mock of ArangoBaseRepositoryInterface interface.
type MockArangoBaseRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockArangoBaseRepositoryInterfaceMockRecorder
}

// MockArangoBaseRepositoryInterfaceMockRecorder is the mock recorder for MockArangoBaseRepositoryInterface.
type MockArangoBaseRepositoryInterfaceMockRecorder struct {
	mock *MockArangoBaseRepositoryInterface
}

// NewMockArangoBaseRepositoryInterface creates a new mock instance.
func NewMockArangoBaseRepositoryInterface(ctrl *gomock.Controller) *MockArangoBaseRepositoryInterface {
	mock := &MockArangoBaseRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockArangoBaseRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArangoBaseRepositoryInterface) EXPECT() *MockArangoBaseRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AbortTransaction mocks base method.
func (m *MockArangoBaseRepositoryInterface) AbortTransaction(c context.Context, t Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortTransaction", c, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortTransaction indicates an expected call of AbortTransaction.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) AbortTransaction(c, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortTransaction", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).AbortTransaction), c, t)
}

// All mocks base method.
func (m *MockArangoBaseRepositoryInterface) All(c context.Context, request any, baseFilter PaginationFilters) ([]any, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", c, request, baseFilter)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// All indicates an expected call of All.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) All(c, request, baseFilter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).All), c, request, baseFilter)
}

// Arango mocks base method.
func (m *MockArangoBaseRepositoryInterface) Arango() ArangoDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Arango")
	ret0, _ := ret[0].(ArangoDB)
	return ret0
}

// Arango indicates an expected call of Arango.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) Arango() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Arango", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).Arango))
}

// BeginTransaction mocks base method.
func (m *MockArangoBaseRepositoryInterface) BeginTransaction(c context.Context, read, write, exclusive []string, opts *driver.BeginTransactionOptions) (Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", c, read, write, exclusive, opts)
	ret0, _ := ret[0].(Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) BeginTransaction(c, read, write, exclusive, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).BeginTransaction), c, read, write, exclusive, opts)
}

// BuildFilter mocks base method.
func (m *MockArangoBaseRepositoryInterface) BuildFilter(s any, filters []ArangoFilterQueryBuilder, joinCollection string, prefixes ...string) []ArangoFilterQueryBuilder {
	m.ctrl.T.Helper()
	varargs := []any{s, filters, joinCollection}
	for _, a := range prefixes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildFilter", varargs...)
	ret0, _ := ret[0].([]ArangoFilterQueryBuilder)
	return ret0
}

// BuildFilter indicates an expected call of BuildFilter.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) BuildFilter(s, filters, joinCollection any, prefixes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{s, filters, joinCollection}, prefixes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildFilter", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).BuildFilter), varargs...)
}

// CommitTransaction mocks base method.
func (m *MockArangoBaseRepositoryInterface) CommitTransaction(c context.Context, t Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction", c, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) CommitTransaction(c, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).CommitTransaction), c, t)
}

// Count mocks base method.
func (m *MockArangoBaseRepositoryInterface) Count(request any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) Count(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).Count), request)
}

// Create mocks base method.
func (m *MockArangoBaseRepositoryInterface) Create(c context.Context, request ArangoInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) Create(c, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).Create), c, request)
}

// DB mocks base method.
func (m *MockArangoBaseRepositoryInterface) DB() driver.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(driver.Database)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).DB))
}

// Delete mocks base method.
func (m *MockArangoBaseRepositoryInterface) Delete(c context.Context, request ArangoInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) Delete(c, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).Delete), c, request)
}

// First mocks base method.
func (m *MockArangoBaseRepositoryInterface) First(c context.Context, request ArangoInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First", c, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) First(c, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).First), c, request)
}

// Get mocks base method.
func (m *MockArangoBaseRepositoryInterface) Get(request any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) Get(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).Get), request)
}

// Join mocks base method.
func (m *MockArangoBaseRepositoryInterface) Join(query *ArangoQuery) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", query)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) Join(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).Join), query)
}

// Limit mocks base method.
func (m *MockArangoBaseRepositoryInterface) Limit(limit int) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", limit)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) Limit(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).Limit), limit)
}

// NewQuery mocks base method.
func (m *MockArangoBaseRepositoryInterface) NewQuery() ArangoQueryInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewQuery")
	ret0, _ := ret[0].(ArangoQueryInterface)
	return ret0
}

// NewQuery indicates an expected call of NewQuery.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) NewQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewQuery", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).NewQuery))
}

// Offset mocks base method.
func (m *MockArangoBaseRepositoryInterface) Offset(offset int) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", offset)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) Offset(offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).Offset), offset)
}

// Raw mocks base method.
func (m *MockArangoBaseRepositoryInterface) Raw(c context.Context, query string, args map[string]any, response any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw", c, query, args, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) Raw(c, query, args, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).Raw), c, query, args, response)
}

// RawAll mocks base method.
func (m *MockArangoBaseRepositoryInterface) RawAll(c context.Context, queryBuilder ArangoQueryBuilder) ([]any, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawAll", c, queryBuilder)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RawAll indicates an expected call of RawAll.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) RawAll(c, queryBuilder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawAll", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).RawAll), c, queryBuilder)
}

// RawFirst mocks base method.
func (m *MockArangoBaseRepositoryInterface) RawFirst(c context.Context, queryBuilder ArangoQueryBuilder, request ArangoInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawFirst", c, queryBuilder, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RawFirst indicates an expected call of RawFirst.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) RawFirst(c, queryBuilder, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawFirst", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).RawFirst), c, queryBuilder, request)
}

// Returns mocks base method.
func (m *MockArangoBaseRepositoryInterface) Returns(returns ...string) *ArangoQuery {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range returns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Returns", varargs...)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// Returns indicates an expected call of Returns.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) Returns(returns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Returns", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).Returns), returns...)
}

// Sort mocks base method.
func (m *MockArangoBaseRepositoryInterface) Sort(sortField, sortOrder string) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sort", sortField, sortOrder)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// Sort indicates an expected call of Sort.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) Sort(sortField, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).Sort), sortField, sortOrder)
}

// Traversal mocks base method.
func (m *MockArangoBaseRepositoryInterface) Traversal(sourceId string, direction TraversalDirection) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Traversal", sourceId, direction)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// Traversal indicates an expected call of Traversal.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) Traversal(sourceId, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Traversal", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).Traversal), sourceId, direction)
}

// Update mocks base method.
func (m *MockArangoBaseRepositoryInterface) Update(c context.Context, request ArangoInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) Update(c, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).Update), c, request)
}

// Where mocks base method.
func (m *MockArangoBaseRepositoryInterface) Where(param ...any) *ArangoQuery {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range param {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) Where(param ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).Where), param...)
}

// WhereColumn mocks base method.
func (m *MockArangoBaseRepositoryInterface) WhereColumn(column, operator, value string) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereColumn", column, operator, value)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// WhereColumn indicates an expected call of WhereColumn.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) WhereColumn(column, operator, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereColumn", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).WhereColumn), column, operator, value)
}

// WhereOr mocks base method.
func (m *MockArangoBaseRepositoryInterface) WhereOr(column, operator string, value any) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereOr", column, operator, value)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// WhereOr indicates an expected call of WhereOr.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) WhereOr(column, operator, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereOr", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).WhereOr), column, operator, value)
}

// WithMany mocks base method.
func (m *MockArangoBaseRepositoryInterface) WithMany(repo *ArangoQuery, alias string) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMany", repo, alias)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// WithMany indicates an expected call of WithMany.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) WithMany(repo, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMany", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).WithMany), repo, alias)
}

// WithOne mocks base method.
func (m *MockArangoBaseRepositoryInterface) WithOne(repo *ArangoQuery, alias string) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOne", repo, alias)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// WithOne indicates an expected call of WithOne.
func (mr *MockArangoBaseRepositoryInterfaceMockRecorder) WithOne(repo, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOne", reflect.TypeOf((*MockArangoBaseRepositoryInterface)(nil).WithOne), repo, alias)
}
