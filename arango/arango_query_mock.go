// Code generated by MockGen. DO NOT EDIT.
// Source: arango/arango_query.go
//
// Generated by this command:
//
//	mockgen -source=arango/arango_query.go -destination=arango/arango_query_mock.go --package=arango
//

// Package arango is a generated GoMock package.
package arango

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockArangoQueryInterface is a mock of ArangoQueryInterface interface.
type MockArangoQueryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockArangoQueryInterfaceMockRecorder
}

// MockArangoQueryInterfaceMockRecorder is the mock recorder for MockArangoQueryInterface.
type MockArangoQueryInterfaceMockRecorder struct {
	mock *MockArangoQueryInterface
}

// NewMockArangoQueryInterface creates a new mock instance.
func NewMockArangoQueryInterface(ctrl *gomock.Controller) *MockArangoQueryInterface {
	mock := &MockArangoQueryInterface{ctrl: ctrl}
	mock.recorder = &MockArangoQueryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArangoQueryInterface) EXPECT() *MockArangoQueryInterfaceMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockArangoQueryInterface) Count(request any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockArangoQueryInterfaceMockRecorder) Count(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockArangoQueryInterface)(nil).Count), request)
}

// Get mocks base method.
func (m *MockArangoQueryInterface) Get(request any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockArangoQueryInterfaceMockRecorder) Get(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArangoQueryInterface)(nil).Get), request)
}

// GetWithContext mocks base method.
func (m *MockArangoQueryInterface) GetWithContext(c context.Context, request any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithContext", c, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetWithContext indicates an expected call of GetWithContext.
func (mr *MockArangoQueryInterfaceMockRecorder) GetWithContext(c, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithContext", reflect.TypeOf((*MockArangoQueryInterface)(nil).GetWithContext), c, request)
}

// Join mocks base method.
func (m *MockArangoQueryInterface) Join(query *ArangoQuery) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", query)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockArangoQueryInterfaceMockRecorder) Join(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockArangoQueryInterface)(nil).Join), query)
}

// Limit mocks base method.
func (m *MockArangoQueryInterface) Limit(limit int) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", limit)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockArangoQueryInterfaceMockRecorder) Limit(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockArangoQueryInterface)(nil).Limit), limit)
}

// Offset mocks base method.
func (m *MockArangoQueryInterface) Offset(offset int) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", offset)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockArangoQueryInterfaceMockRecorder) Offset(offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockArangoQueryInterface)(nil).Offset), offset)
}

// Returns mocks base method.
func (m *MockArangoQueryInterface) Returns(returns ...string) *ArangoQuery {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range returns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Returns", varargs...)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// Returns indicates an expected call of Returns.
func (mr *MockArangoQueryInterfaceMockRecorder) Returns(returns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Returns", reflect.TypeOf((*MockArangoQueryInterface)(nil).Returns), returns...)
}

// Sort mocks base method.
func (m *MockArangoQueryInterface) Sort(sortField, sortOrder string) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sort", sortField, sortOrder)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// Sort indicates an expected call of Sort.
func (mr *MockArangoQueryInterfaceMockRecorder) Sort(sortField, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockArangoQueryInterface)(nil).Sort), sortField, sortOrder)
}

// SortRaw mocks base method.
func (m *MockArangoQueryInterface) SortRaw(sortField, sortOrder string) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortRaw", sortField, sortOrder)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// SortRaw indicates an expected call of SortRaw.
func (mr *MockArangoQueryInterfaceMockRecorder) SortRaw(sortField, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortRaw", reflect.TypeOf((*MockArangoQueryInterface)(nil).SortRaw), sortField, sortOrder)
}

// ToQuery mocks base method.
func (m *MockArangoQueryInterface) ToQuery() (string, map[string]any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToQuery")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(map[string]any)
	return ret0, ret1
}

// ToQuery indicates an expected call of ToQuery.
func (mr *MockArangoQueryInterfaceMockRecorder) ToQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToQuery", reflect.TypeOf((*MockArangoQueryInterface)(nil).ToQuery))
}

// Traversal mocks base method.
func (m *MockArangoQueryInterface) Traversal(source string, direction TraversalDirection, withEdge ...bool) *ArangoQuery {
	m.ctrl.T.Helper()
	varargs := []any{source, direction}
	for _, a := range withEdge {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Traversal", varargs...)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// Traversal indicates an expected call of Traversal.
func (mr *MockArangoQueryInterfaceMockRecorder) Traversal(source, direction any, withEdge ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{source, direction}, withEdge...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Traversal", reflect.TypeOf((*MockArangoQueryInterface)(nil).Traversal), varargs...)
}

// Where mocks base method.
func (m *MockArangoQueryInterface) Where(param ...any) *ArangoQuery {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range param {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockArangoQueryInterfaceMockRecorder) Where(param ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockArangoQueryInterface)(nil).Where), param...)
}

// WhereColumn mocks base method.
func (m *MockArangoQueryInterface) WhereColumn(column, operator, value string) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereColumn", column, operator, value)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// WhereColumn indicates an expected call of WhereColumn.
func (mr *MockArangoQueryInterfaceMockRecorder) WhereColumn(column, operator, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereColumn", reflect.TypeOf((*MockArangoQueryInterface)(nil).WhereColumn), column, operator, value)
}

// WhereOr mocks base method.
func (m *MockArangoQueryInterface) WhereOr(column, operator string, value any) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereOr", column, operator, value)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// WhereOr indicates an expected call of WhereOr.
func (mr *MockArangoQueryInterfaceMockRecorder) WhereOr(column, operator, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereOr", reflect.TypeOf((*MockArangoQueryInterface)(nil).WhereOr), column, operator, value)
}

// WhereOrColumn mocks base method.
func (m *MockArangoQueryInterface) WhereOrColumn(column, operator, value string) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereOrColumn", column, operator, value)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// WhereOrColumn indicates an expected call of WhereOrColumn.
func (mr *MockArangoQueryInterfaceMockRecorder) WhereOrColumn(column, operator, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereOrColumn", reflect.TypeOf((*MockArangoQueryInterface)(nil).WhereOrColumn), column, operator, value)
}

// WhereRaw mocks base method.
func (m *MockArangoQueryInterface) WhereRaw(params string) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereRaw", params)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// WhereRaw indicates an expected call of WhereRaw.
func (mr *MockArangoQueryInterfaceMockRecorder) WhereRaw(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereRaw", reflect.TypeOf((*MockArangoQueryInterface)(nil).WhereRaw), params)
}

// WithMany mocks base method.
func (m *MockArangoQueryInterface) WithMany(repo *ArangoQuery, alias string) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMany", repo, alias)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// WithMany indicates an expected call of WithMany.
func (mr *MockArangoQueryInterfaceMockRecorder) WithMany(repo, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMany", reflect.TypeOf((*MockArangoQueryInterface)(nil).WithMany), repo, alias)
}

// WithOne mocks base method.
func (m *MockArangoQueryInterface) WithOne(repo *ArangoQuery, alias string) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOne", repo, alias)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// WithOne indicates an expected call of WithOne.
func (mr *MockArangoQueryInterfaceMockRecorder) WithOne(repo, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOne", reflect.TypeOf((*MockArangoQueryInterface)(nil).WithOne), repo, alias)
}

// clearQuery mocks base method.
func (m *MockArangoQueryInterface) clearQuery() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "clearQuery")
}

// clearQuery indicates an expected call of clearQuery.
func (mr *MockArangoQueryInterfaceMockRecorder) clearQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "clearQuery", reflect.TypeOf((*MockArangoQueryInterface)(nil).clearQuery))
}

// executeQuery mocks base method.
func (m *MockArangoQueryInterface) executeQuery(c context.Context, request any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "executeQuery", c, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// executeQuery indicates an expected call of executeQuery.
func (mr *MockArangoQueryInterfaceMockRecorder) executeQuery(c, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "executeQuery", reflect.TypeOf((*MockArangoQueryInterface)(nil).executeQuery), c, request)
}

// getArgKey mocks base method.
func (m *MockArangoQueryInterface) getArgKey(argKey string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getArgKey", argKey)
	ret0, _ := ret[0].(string)
	return ret0
}

// getArgKey indicates an expected call of getArgKey.
func (mr *MockArangoQueryInterfaceMockRecorder) getArgKey(argKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getArgKey", reflect.TypeOf((*MockArangoQueryInterface)(nil).getArgKey), argKey)
}

// setRawQuery mocks base method.
func (m *MockArangoQueryInterface) setRawQuery(query string, args map[string]any) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setRawQuery", query, args)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// setRawQuery indicates an expected call of setRawQuery.
func (mr *MockArangoQueryInterfaceMockRecorder) setRawQuery(query, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setRawQuery", reflect.TypeOf((*MockArangoQueryInterface)(nil).setRawQuery), query, args)
}

// toQueryWithoutReturn mocks base method.
func (m *MockArangoQueryInterface) toQueryWithoutReturn() (string, map[string]any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "toQueryWithoutReturn")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(map[string]any)
	return ret0, ret1
}

// toQueryWithoutReturn indicates an expected call of toQueryWithoutReturn.
func (mr *MockArangoQueryInterfaceMockRecorder) toQueryWithoutReturn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "toQueryWithoutReturn", reflect.TypeOf((*MockArangoQueryInterface)(nil).toQueryWithoutReturn))
}

// where mocks base method.
func (m *MockArangoQueryInterface) where(column, operator string, value any) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "where", column, operator, value)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// where indicates an expected call of where.
func (mr *MockArangoQueryInterfaceMockRecorder) where(column, operator, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "where", reflect.TypeOf((*MockArangoQueryInterface)(nil).where), column, operator, value)
}

// with mocks base method.
func (m *MockArangoQueryInterface) with(query *ArangoQuery, alias string) *ArangoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "with", query, alias)
	ret0, _ := ret[0].(*ArangoQuery)
	return ret0
}

// with indicates an expected call of with.
func (mr *MockArangoQueryInterfaceMockRecorder) with(query, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "with", reflect.TypeOf((*MockArangoQueryInterface)(nil).with), query, alias)
}
